// Code generated by "{{.GenerateCmd}}"
package {{.Package}}

// {{.Singular}} defines an functional option to populate {{.Source}}
type {{.Singular}} func(s *{{.Source}})

// {{.Plural}} defines a plural set of {{.Singular}}
type {{.Plural}} []{{.Singular}}

// Apply will apply a set of options to a pointer to a given {{.Source}}
func (opts {{.Plural}}) Apply(s *{{.Source}}) {{.Source}} {
    for _, opt := range opts {
        opt(s)
    }
    return *s
}

{{- range .Options }}
// {{$.OptionPrefix}}{{.Name}} will set the {{.Field}} option for {{$.Source}}.
{{- if .IsSlice}}
func {{$.OptionPrefix}}{{.Name}}(values ...{{.Type}}) {{$.Singular}} {
    return func(s *{{$.Source}}) {
        s.{{.Field}} = append(s.{{.Field}}, values...)
    }
}
{{else}}
func {{$.OptionPrefix}}{{.Name}}(value {{.Type}}) {{$.Singular}} {
    return func(s *{{$.Source}}) {
        s.{{.Field}} = value
    }
}
{{- end}}
{{- end}}

